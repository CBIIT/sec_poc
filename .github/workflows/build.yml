name: Build images

on:
  push:
    branches: [$default-branch]
  pull_request:
    branches: [$default-branch]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.repository.default_branch }}
          path: sec_poc

      - uses: actions/checkout@v4
        with:
          repository: CBIIT/sec_admin
          path: sec_admin
          ref: cloud-migration

      - uses: actions/checkout@v4
        with:
          repository: CBIIT/sec_nlp
          path: sec_nlp

      - uses: docker/setup-buildx-action@v3

      - uses: actions/cache@v4
        id: apt-cache
        with:
          path: |
            var-cache-apt
            var-lib-apt
          key: apt-cache-${{ hashFiles('Dockerfile.dev', 'Dockerfile.ETL', 'Dockerfile.prod') }}

      - uses: actions/cache@v4
        id: renv-cache
        with:
          path: |
            renv-cache
            renv-cache-tmp
          key: renv-cache-${{ hashFiles('sec_poc/renv.lock', 'sec_admin/renv.lock') }}

      - uses: actions/cache@v4
        id: pip-cache
        with:
          path: pip-cache
          key: pip-cache-${{ hashFiles('sec_nlp/requirements.txt') }}

      - uses: reproducible-containers/buildkit-cache-dance@v3.1.0
        with:
          cache-map: |
            {
              "renv-cache": "/root/.cache/R/renv",
              "renv-cache-tmp": "/tmp/renv/cache",
              "pip-cache": "/root/.cache/pip",
              "var-cache-apt": "/var/cache/apt",
              "var-lib-apt": "/var/lib/apt"
            }
          skip-extraction: ${{ steps.apt-cache.outputs.cache-hit == 'true' && steps.renv-cache.outputs.cache-hit == 'true' && steps.pip-cache.outputs.cache-hit == 'true' }}

      - run: make docker_build docker_build_prod docker_save GHA=true

      - uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: sec_poc_*.tar
          retention-days: 7
